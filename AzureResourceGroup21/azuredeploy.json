{
  "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "aspnetcoreEnvironment": {
      "type": "string"
    },
    "DeploymentStorageUri": {
      "type": "string",
      "minLength": 1
    },
    "DeploymentStorageSas": {
      "type": "string",
      "minLength": 1
    },
    "DeploymentBlobPrefix": {
      "type": "string",
      "minLength": 1
    },
    "OptimizerWebAppName": {
      "type": "string",
      "minLength": 1
    },
    "OptimizationBlobStartCalculationPrefix": {
      "type": "string",
      "minLength": 1
    },
    "OptimizationBlobOutputCalculationPrefix": {
      "type": "string",
      "minLength": 1
    },
    "WebApplicationApplicationInsightsName": {
      "type": "string",
      "minLength": 1
    },
    "WebApplicationWebAppName": {
      "type": "string",
      "minLength": 1
    },
    "WebApplicationHostingPlanName": {
      "type": "string",
      "minLength": 1
    },
    "WebApplicationSkuName": {
      "type": "string",
      "defaultValue": "F1",
      "allowedValues": [
        "F1",
        "D1",
        "B1",
        "B2",
        "B3",
        "S1",
        "S2",
        "S3",
        "P1",
        "P2",
        "P3",
        "P4"
      ],
      "metadata": {
        "description": "Describes plan's pricing tier and instance size. Check details at https://azure.microsoft.com/en-us/pricing/details/app-service/"
      }
    },
    "WebApplicationSkuCapacity": {
      "type": "int",
      "defaultValue": 1,
      "minValue": 1,
      "metadata": {
        "description": "Describes plan's instance count"
      }
    },
    "BlackboxStorageAccountName": {
      "type": "string",
      "minLength": 1
    },
    "OptimizerStorageAccountName": {
      "type": "string",
      "minLength": 1
    },
    "alertEmailAddresses": {
      "type": "array"
    },
    "sqlServerName": {
      "type": "string",
      "minLength": 1
    },
    "sqlServerAdminLogin": {
      "type": "string",
      "minLength": 1
    },
    "sqlServerAdminLoginPassword": {
      "type": "securestring"
    },
    "databaseName": {
      "type": "string",
      "minLength": 1
    },
    "databaseCollation": {
      "type": "string",
      "minLength": 1,
      "defaultValue": "SQL_Latin1_General_CP1_CI_AS"
    },
    "databaseEdition": {
      "type": "string",
      "defaultValue": "Basic",
      "allowedValues": [
        "Basic",
        "Standard",
        "Premium"
      ]
    },
    "databaseRequestedServiceObjectiveName": {
      "type": "string",
      "defaultValue": "Basic",
      "allowedValues": [
        "Basic",
        "S0",
        "S1",
        "S2",
        "P1",
        "P2",
        "P3"
      ],
      "metadata": {
        "description": "Describes the performance level for Edition"
      }
    },
    "APIMAuthNAuthZSubscriptionKey": {
      "type": "string",
      "minLength": 1
    },
    "APIMAuthNAuthZServiceEndpoint": {
      "type": "string",
      "minLength": 1
    },
    "APIMSubscriptionKey": {
      "type": "string",
      "minLength": 1
    },
    "APIMServiceEndpoint": {
      "type": "string",
      "minLength": 1
    },
    "APIMSapEndpoint": {
      "type": "string",
      "minLength": 1
    },
    "APIMGurobiEndpoint": {
      "type": "string",
      "minLength": 1,
      "defaultValue": "/gurobi/pools/{0}/machines"
    },
    "B2C_idaClientId": {
      "type": "string",
      "minLength": 1
    },
    "B2C_idaTenant": {
      "type": "string",
      "minLength": 1
    },
    "B2C_idaSignupSigninPolicyId": {
      "type": "string",
      "minLength": 1
    },
    "CosmosDB_AccountName": {
      "type": "string",
      "minLength": 1
    },
    "CosmosDB_DatabaseId": {
      "type": "string",
      "minLength": 1
    },
    "CosmosDB_CollectionName": {
      "type": "string",
      "minLength": 1
    },
    "LocaleTableName": {
      "type": "string",
      "minLength": 1
    },
    "MessageTableName": {
      "type": "string",
      "minLength": 1
    },
    "MessageHashTableName": {
      "type": "string",
      "minLength": 1
    },
    "LogicAppsState": {
      "type": "object"
    },
    "FeedLibrary.GetSilageDataFromSAPName": {
      "type": "string",
      "minLength": 1,
      "maxLength": 80,
      "metadata": {
        "description": "Name of the Logic App."
      }
    },
    "FeedLibrary.GetProductsFromSAPName": {
      "type": "string",
      "minLength": 1,
      "maxLength": 80,
      "metadata": {
        "description": "Name of the Logic App."
      }
    },
    "FeedLibrary.BlackboxDatabaseConnectionName": {
      "type": "string",
      "defaultValue": "Dev.BlackboxDatabaseConnection"
    },
    "FeedLibrarySynchronizationFunctionName": {
      "type": "string",
      "metadata": {
        "description": "The name of the FeedLibrary.Synchronization function app."
      }
    },
    "MPR.SynchronizationFunctionName": {
      "type": "string",
      "metadata": {
        "description": "The name of the MPR.Synchronization function app."
      }
    },
    "MPR.Schedule": {
      "type": "string",
      "minLength": 1
    },
    "OptimizationFunctionName": {
      "type": "string",
      "metadata": {
        "description": "The name of the Optimization function app."
      }
    },
    "FeedLibrary.InternalSilageQueueName": {
      "type": "string",
      "minlength": 1
    },
    "functionAppHostingPlanName": {
      "type": "string",
      "metadata": {
        "description": "The name of the function app hosting plan."
      }
    },
    "storageAccountType": {
      "type": "string",
      "defaultValue": "Standard_LRS",
      "allowedValues": [
        "Standard_LRS",
        "Standard_GRS",
        "Standard_ZRS",
        "Premium_LRS"
      ],
      "metadata": {
        "description": "Storage Account type"
      }
    },
    "Optimization.ProcessResultsName": {
      "type": "string"
    },
    "Blackbox.Servicebus.Name": {
      "type": "string"
    },
    "Blackbox.Servicebus.OptimizationCalculationQueue.Name": {
      "type": "string"
    },
    "Blackbox.Servicebus.OptimizationResultsQueue.Name": {
      "type": "string"
    },
    "Blackbox.Servicebus.TopicName": {
      "type": "string"
    },
    "Optimizer.Service.ResourceGroup.Name": {
      "type": "string"
    },
    "GurobiAccessId": {
      "type": "string",
      "minlength": 1
    },
    "GurobiKey": {
      "type": "string",
      "minlength": 1
    },
    "GurobiPool": {
      "type": "string",
      "minlength": 1
    }
  },
  "variables": {
    "docDBVersion": "2016-03-31",
    "CosmosDBResourceId": "[resourceId('Microsoft.DocumentDb/databaseAccounts', parameters('CosmosDB_AccountName'))]",
    "deploymentApiVersion": "2016-09-01",
    "webApiVersion": "2015-08-01",
    "FunctionAppApiVersion": "2015-08-01",
    "HostingPlanApiVersion": "2015-04-01",
    "webApplicationConfiguration": {
      "phpVersion": "off",
      "alwaysOn": true,
      "use32BitWorkerProcess": false,
      "requestTracingEnabled": true,
      "httpLoggingEnabled": true,
      "logsDirectorySizeLimit": 40,
      "detailedErrorLoggingEnabled": true,
      "clientAffinityCookie": false
    },
    "logicAppsApiVersion": "2016-06-01",
    "insightsApiVersion": "2015-05-01",
    "alertsApiVersion": "2016-03-01",
    "autoscaleApiVersion": "2015-04-01",
    "storageApiVersion": "2015-06-15",
    "BlackboxStorageAccountUniqueName": "[concat(parameters('BlackboxStorageAccountName'), uniquestring(resourceGroup().id))]",
    "optimizerResourceGroupId": "[concat(subscription().id, '/resourceGroups/', parameters('Optimizer.Service.ResourceGroup.Name'))]",
    "OptimizerStorageAccountUniqueName": "[concat(parameters('OptimizerStorageAccountName'), uniqueString(variables('optimizerResourceGroupId')))]",
    "storageId": "[resourceId('Microsoft.Storage/storageAccounts', variables('BlackboxStorageAccountUniqueName'))]",
    "optimizerStorageId": "[resourceId(parameters('Optimizer.Service.ResourceGroup.Name'), 'Microsoft.Storage/storageAccounts', variables('OptimizerStorageAccountUniqueName'))]",
    "storageConnectionStringPrefix": "[concat('DefaultEndpointsProtocol=https;AccountName=',variables('BlackboxStorageAccountUniqueName'),';AccountKey=')]",
    "optimizerStorageConnectionStringPrefix": "[concat('DefaultEndpointsProtocol=https;AccountName=',variables('OptimizerStorageAccountUniqueName'),';AccountKey=')]",
    "sqlServerName": "[concat(parameters('sqlServerName'), '-', uniqueString(resourceGroup().id))]",
    "sqlServerApiVersion": "2014-04-01-preview",
    "sqlServerVersion": "12.0",
    "ServiceBusApiVersion": "2015-08-01",
    "DefaultSASKeyName": "RootManageSharedAccessKey",
    "AuthRuleResourceId": "[resourceId(parameters('Optimizer.Service.ResourceGroup.Name'), 'Microsoft.ServiceBus/namespaces/authorizationRules', parameters('Blackbox.Servicebus.Name'), variables('DefaultSASKeyName'))]",
    "Blackbox.Servicebus.OptimizationResultsQueue.SendListen.Name": "[concat(parameters('Blackbox.Servicebus.OptimizationResultsQueue.Name'), '-listen')]",
    "Blackbox.Servicebus.OptimizationResultsQueue.SendListen.ResourceId": "[resourceId(parameters('Optimizer.Service.ResourceGroup.Name'), 'Microsoft.ServiceBus/namespaces/queues/authorizationRules', parameters('Blackbox.Servicebus.Name'), parameters('Blackbox.Servicebus.OptimizationResultsQueue.Name'), variables('Blackbox.Servicebus.OptimizationResultsQueue.SendListen.Name'))]",
    "ProductionEnvironments": [
      "production"
    ],
    "functionsStorageAccountName": "[concat('azfunctions', uniquestring(resourceGroup().id))]",
    "functionsStorageAccountid": "[concat(resourceGroup().id,'/providers/','Microsoft.Storage/storageAccounts/', variables('functionsStorageAccountName'))]"
  },
  "resources": [
    {
      "apiVersion": "[variables('docDBVersion')]",
      "type": "Microsoft.DocumentDB/databaseAccounts",
      "name": "[parameters('CosmosDB_AccountName')]",
      "location": "[resourceGroup().location]",
      "tags": {
        "displayName": "Blackbox-CosmosDB"
      },
      "properties": {
        "name": "[parameters('CosmosDB_AccountName')]",
        "databaseAccountOfferType": "Standard",
        "consistencyPolicy": {
          "defaultConsistencyLevel": "Session",
          "maxStalenessPrefix": "100",
          "maxIntervalInSeconds": "5"
        }
      }
    },
    {
      "apiVersion": "[variables('webApiVersion')]",
      "name": "[parameters('WebApplicationHostingPlanName')]",
      "dependsOn": [],
      "type": "Microsoft.Web/serverfarms",
      "location": "[resourceGroup().location]",
      "tags": {
        "displayName": "WebApplication-HostingPlanName"
      },
      "sku": {
        "name": "[parameters('WebApplicationSkuName')]",
        "capacity": "[parameters('WebApplicationSkuCapacity')]"
      },
      "properties": {
        "name": "[parameters('WebApplicationHostingPlanName')]"
      }
    },
    {
      "apiVersion": "[variables('autoscaleApiVersion')]",
      "name": "[concat(parameters('WebApplicationHostingPlanName'), '-', resourceGroup().name)]",
      "type": "Microsoft.Insights/autoscalesettings",
      "location": "[resourceGroup().location]",
      "tags": {
        "[concat('hidden-link:', resourceGroup().id, '/providers/Microsoft.Web/serverfarms/', parameters('WebApplicationHostingPlanName'))]": "Resource",
        "displayName": "WebApplication-AutoScaleSettings"
      },
      "dependsOn": [
        "[concat('Microsoft.Web/serverfarms/', parameters('WebApplicationHostingPlanName'))]"
      ],
      "properties": {
        "profiles": [
          {
            "name": "Default",
            "capacity": {
              "minimum": 1,
              "maximum": 10,
              "default": 1
            },
            "rules": [
              {
                "metricTrigger": {
                  "metricName": "CpuPercentage",
                  "metricResourceUri": "[concat(resourceGroup().id, '/providers/Microsoft.Web/serverfarms/', parameters('WebApplicationHostingPlanName'))]",
                  "timeGrain": "PT1M",
                  "statistic": "Average",
                  "timeWindow": "PT5M",
                  "timeAggregation": "Average",
                  "operator": "GreaterThan",
                  "threshold": 75.0
                },
                "scaleAction": {
                  "direction": "Increase",
                  "type": "ChangeCount",
                  "value": 1,
                  "cooldown": "PT10M"
                }
              },
              {
                "metricTrigger": {
                  "metricName": "CpuPercentage",
                  "metricResourceUri": "[concat(resourceGroup().id, '/providers/Microsoft.Web/serverfarms/', parameters('WebApplicationHostingPlanName'))]",
                  "timeGrain": "PT1M",
                  "statistic": "Average",
                  "timeWindow": "PT10M",
                  "timeAggregation": "Average",
                  "operator": "LessThan",
                  "threshold": 40.0
                },
                "scaleAction": {
                  "direction": "Decrease",
                  "type": "ChangeCount",
                  "value": 1,
                  "cooldown": "PT1H"
                }
              }
            ]
          }
        ],
        "enabled": true,
        "name": "[concat(parameters('WebApplicationHostingPlanName'), '-', resourceGroup().name)]",
        "targetResourceUri": "[concat(resourceGroup().id, '/providers/Microsoft.Web/serverfarms/', parameters('WebApplicationHostingPlanName'))]"
      }
    },
    {
      "apiVersion": "[variables('alertsApiVersion')]",
      "name": "[concat('CPUHigh ', parameters('WebApplicationHostingPlanName'))]",
      "type": "Microsoft.Insights/alertrules",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[concat('Microsoft.Web/serverfarms/', parameters('WebApplicationHostingPlanName'))]"
      ],
      "tags": {
        "[concat('hidden-link:', resourceGroup().id, '/providers/Microsoft.Web/serverfarms/', parameters('WebApplicationHostingPlanName'))]": "Resource",
        "displayName": "WebApplication-CPUHighAlertRule"
      },
      "properties": {
        "name": "[concat('CPUHigh ', parameters('WebApplicationHostingPlanName'))]",
        "description": "[concat('The average CPU is high across all the instances of ', parameters('WebApplicationHostingPlanName'))]",
        "isEnabled": true,
        "condition": {
          "odata.type": "Microsoft.Azure.Management.Insights.Models.ThresholdRuleCondition",
          "dataSource": {
            "odata.type": "Microsoft.Azure.Management.Insights.Models.RuleMetricDataSource",
            "resourceUri": "[concat(resourceGroup().id, '/providers/Microsoft.Web/serverfarms/', parameters('WebApplicationHostingPlanName'))]",
            "metricName": "CpuPercentage"
          },
          "operator": "GreaterThan",
          "threshold": 90,
          "windowSize": "PT15M"
        },
        "action": {
          "odata.type": "Microsoft.Azure.Management.Insights.Models.RuleEmailAction",
          "sendToServiceOwners": false,
          "customEmails": "[parameters('alertEmailAddresses')]"
        }
      }
    },
    {
      "apiVersion": "[variables('webApiVersion')]",
      "name": "[parameters('WebApplicationWebAppName')]",
      "type": "Microsoft.Web/sites",
      "location": "[resourceGroup().location]",
      "tags": {
        "[concat('hidden-related:', resourceGroup().id, '/providers/Microsoft.Web/serverfarms/', parameters('WebApplicationHostingPlanName'))]": "Resource",
        "displayName": "WebApplication-WebApp"
      },
      "dependsOn": [
        "[concat('Microsoft.Web/serverfarms/', parameters('WebApplicationHostingPlanName'))]"
      ],
      "properties": {
        "name": "[parameters('WebApplicationWebAppName')]",
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', parameters('WebApplicationHostingPlanName'))]"
      },
      "resources": [
        {
          "name": "connectionstrings",
          "type": "config",
          "apiVersion": "[variables('webApiVersion')]",
          "dependsOn": [
            "[concat('Microsoft.Web/sites/', parameters('WebApplicationWebAppName'))]",
            "[concat('Microsoft.Sql/servers/', variables('sqlServerName'))]"
          ],
          "tags": {
            "displayName": "WebApplication-WebApp-ConnectionStrings"
          },
          "properties": {
            "BlackboxStorageConnectionString": {
              "value": "[concat(variables('storageConnectionStringPrefix'), listkeys(variables('storageId'), variables('storageApiVersion')).key1)]",
              "type": "Custom"
            },
            "DatabaseConnectionString": {
              "value": "[concat('Data Source=tcp:', reference(concat('Microsoft.Sql/servers/', variables('sqlServerName'))).fullyQualifiedDomainName, ',1433;Initial Catalog=', parameters('databaseName'), ';User Id=', parameters('sqlServerAdminLogin'), ';Password=', parameters('sqlServerAdminLoginPassword'), ';')]",
              "type": "SQLAzure"
            },
            "OptimizerServiceBusConnectionString": {
              "value": "[concat('Endpoint=sb://', parameters('Blackbox.Servicebus.Name'),'.servicebus.windows.net/;SharedAccessKeyName=', variables('DefaultSASKeyName'),';SharedAccessKey=', listkeys(variables('AuthRuleResourceId'), variables('serviceBusApiVersion')).primaryKey)]",
              "type": "Custom"
            },
            "OptimizerStorageConnectionString": {
              "value": "[concat(variables('optimizerStorageConnectionStringPrefix'), listkeys(variables('optimizerStorageId'), variables('storageApiVersion')).key1)]",
              "type": "Custom"
            }
          }
        },
        {
          "apiVersion": "[variables('webApiVersion')]",
          "name": "web",
          "type": "config",
          "dependsOn": [
            "[concat('Microsoft.Web/sites/', parameters('WebApplicationWebAppName'))]"
          ],
          "tags": {
            "displayName": "WebApplication-WebApp-Config"
          },
          "properties": "[variables('webApplicationConfiguration')]"
        },
        {
          "apiVersion": "[variables('webApiVersion')]",
          "name": "appsettings",
          "type": "config",
          "dependsOn": [
            "[concat('Microsoft.Web/sites/', parameters('WebApplicationWebAppName'))]",
            "[resourceId('Microsoft.DocumentDb/databaseAccounts', parameters('CosmosDB_AccountName'))]"
          ],
          "tags": {
            "displayName": "WebApplication-WebApp-AppSettings"
          },
          "properties": {
            "CosmosDB:EndpointUrl": "[reference(variables('CosmosDBResourceId')).documentEndpoint]",
            "CosmosDB:AuthorizationKey": "[listkeys(variables('CosmosDBResourceId'), variables('docDBVersion')).primaryMasterKey]",
            "CosmosDB:DatabaseId": "[parameters('CosmosDB_DatabaseId')]",
            "CosmosDB:CollectionName": "[parameters('CosmosDB_CollectionName')]",
            "Optimization:ServicebusTopicName": "[parameters('Blackbox.Servicebus.TopicName')]",
            "Optimization:StartCalculationQueueName": "[parameters('Blackbox.Servicebus.OptimizationCalculationQueue.Name')]",
            "Optimization:BlobOutputCalculationPrefix": "[parameters('OptimizationBlobOutputCalculationPrefix')]",
            "Optimization:BlobInputCalculationPrefix": "[parameters('OptimizationBlobStartCalculationPrefix')]",
            "APPINSIGHTS_INSTRUMENTATIONKEY": "[reference(concat('Microsoft.Insights/components/', parameters('WebApplicationApplicationInsightsName')), variables('insightsApiVersion')).InstrumentationKey]",
            "ASPNETCORE_ENVIRONMENT": "[parameters('aspnetcoreEnvironment')]",
            "APIM:SubscriptionKey": "[parameters('APIMSubscriptionKey')]",
            "APIM:ServiceEndpoint": "[parameters('APIMServiceEndpoint')]",
            "APIM:AuthNAuthZ:SubscriptionKey": "[parameters('APIMAuthNAuthZSubscriptionKey')]",
            "APIM:AuthNAuthZ:ServiceEndpoint": "[parameters('APIMAuthNAuthZServiceEndpoint')]",
            "APIM:SapEndpoint": "[parameters('APIMSapEndpoint')]",
            "ida:B2CTenant": "[parameters('B2C_idaTenant')]",
            "ida:B2CClientId": "[parameters('B2C_idaClientId')]",
            "ida:SignupSigninPolicyId": "[parameters('B2C_idaSignupSigninPolicyId')]",
            "ida:RedirectUri": "[concat('https://', reference(concat('Microsoft.Web/sites/', parameters('WebApplicationWebAppName')), variables('webApiVersion')).defaultHostName)]",
            "Locale:LocaleTableName": "[parameters('LocaleTableName')]",
            "Locale:MessageTableName": "[parameters('MessageTableName')]",
            "Locale:MessageHashTableName": "[parameters('MessageHashTableName')]"
          }
        }
      ]
    },
    {
      "apiVersion": "[variables('alertsApiVersion')]",
      "name": "[concat('ServerErrors ', parameters('WebApplicationWebAppName'))]",
      "type": "Microsoft.Insights/alertrules",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[concat('Microsoft.Web/sites/', parameters('WebApplicationWebAppName'))]"
      ],
      "tags": {
        "[concat('hidden-link:', resourceGroup().id, '/providers/Microsoft.Web/sites/', parameters('WebApplicationWebAppName'))]": "Resource",
        "displayName": "WebApplication-ServerErrorsAlertRule"
      },
      "properties": {
        "name": "[concat('ServerErrors ', parameters('WebApplicationWebAppName'))]",
        "description": "[concat(parameters('WebApplicationWebAppName'), ' has some server errors, status code 5xx.')]",
        "isEnabled": true,
        "condition": {
          "odata.type": "Microsoft.Azure.Management.Insights.Models.ThresholdRuleCondition",
          "dataSource": {
            "odata.type": "Microsoft.Azure.Management.Insights.Models.RuleMetricDataSource",
            "resourceUri": "[concat(resourceGroup().id, '/providers/Microsoft.Web/sites/', parameters('WebApplicationWebAppName'))]",
            "metricName": "Http5xx"
          },
          "operator": "GreaterThan",
          "threshold": 0.0,
          "windowSize": "PT5M"
        },
        "action": {
          "odata.type": "Microsoft.Azure.Management.Insights.Models.RuleEmailAction",
          "sendToServiceOwners": false,
          "customEmails": "[parameters('alertEmailAddresses')]"
        }
      }
    },
    {
      "apiVersion": "[variables('insightsApiVersion')]",
      "name": "[parameters('WebApplicationApplicationInsightsName')]",
      "type": "Microsoft.Insights/components",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[concat('Microsoft.Web/sites/', parameters('WebApplicationWebAppName'))]"
      ],
      "tags": {
        "[concat('hidden-link:', resourceGroup().id, '/providers/Microsoft.Web/sites/', parameters('WebApplicationWebAppName'))]": "Resource",
        "displayName": "WebApplication-AppInsightsComponent"
      },
      "properties": {
        "applicationId": "[parameters('WebApplicationWebAppName')]"
      }
    },
    {
      "name": "[variables('sqlServerName')]",
      "type": "Microsoft.Sql/servers",
      "location": "[resourceGroup().location]",
      "apiVersion": "[variables('sqlServerApiVersion')]",
      "dependsOn": [],
      "tags": {
        "displayName": "SqlServer"
      },
      "properties": {
        "version": "[variables('sqlServerVersion')]",
        "administratorLogin": "[parameters('sqlServerAdminLogin')]",
        "administratorLoginPassword": "[parameters('sqlServerAdminLoginPassword')]"
      },
      "resources": [
        {
          "name": "AllowAllWindowsAzureIps",
          "type": "firewallrules",
          "location": "[resourceGroup().location]",
          "apiVersion": "[variables('sqlServerApiVersion')]",
          "dependsOn": [
            "[concat('Microsoft.Sql/servers/', variables('sqlServerName'))]"
          ],
          "properties": {
            "startIpAddress": "0.0.0.0",
            "endIpAddress": "0.0.0.0"
          }
        },
        {
          "name": "[parameters('databaseName')]",
          "type": "databases",
          "location": "[resourceGroup().location]",
          "apiVersion": "[variables('sqlServerApiVersion')]",
          "dependsOn": [
            "[variables('sqlServerName')]"
          ],
          "tags": {
            "displayName": "Database"
          },
          "properties": {
            "collation": "[parameters('databaseCollation')]",
            "edition": "[parameters('databaseEdition')]",
            "maxSizeBytes": "268435456000",
            "requestedServiceObjectiveName": "[parameters('databaseRequestedServiceObjectiveName')]"
          }
        }
      ]
    },
    {
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[variables('functionsStorageAccountName')]",
      "apiVersion": "[variables('StorageApiVersion')]",
      "location": "[resourceGroup().location]",
      "tags": {
        "displayName": "Functions-Storage"
      },
      "properties": {
        "accountType": "[parameters('storageAccountType')]"
      }
    },
    {
      "apiVersion": "[variables('FunctionAppApiVersion')]",
      "type": "Microsoft.Web/sites",
      "name": "[parameters('MPR.SynchronizationFunctionName')]",
      "location": "[resourceGroup().location]",
      "kind": "functionapp",
      "tags": {
        "displayName": "Functions-MPR.Synchronization"
      },
      "dependsOn": [],
      "properties": {
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', parameters('functionAppHostingPlanName'))]",
        "siteConfig": {
          "appSettings": [
            {
              "name": "AzureWebJobsDashboard",
              "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('BlackboxStorageAccountUniqueName'), ';AccountKey=', listKeys(variables('storageId'), variables('StorageApiVersion')).key1)]"
            },
            {
              "name": "AzureWebJobsStorage",
              "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('BlackboxStorageAccountUniqueName'), ';AccountKey=', listKeys(variables('storageId'), variables('StorageApiVersion')).key1)]"
            },
            {
              "name": "WEBSITE_CONTENTAZUREFILECONNECTIONSTRING",
              "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('BlackboxStorageAccountUniqueName'), ';AccountKey=', listKeys(variables('storageId'), variables('StorageApiVersion')).key1)]"
            },
            {
              "name": "WEBSITE_CONTENTSHARE",
              "value": "[toLower(parameters('MPR.SynchronizationFunctionName'))]"
            },
            {
              "name": "AzureWebJobsSecretStorageType",
              "value": "files"
            },
            {
              "name": "FUNCTIONS_EXTENSION_VERSION",
              "value": "~2"
            },
            {
              "name": "FUNCTIONS_WORKER_RUNTIME",
              "slotSetting": false,
              "value": "dotnet"
            },
            {
              "name": "APPINSIGHTS_INSTRUMENTATIONKEY",
              "value": "[reference(concat('Microsoft.Insights/components/', parameters('WebApplicationApplicationInsightsName'))).InstrumentationKey]"
            },
            {
              "name": "WEBSITE_NODE_DEFAULT_VERSION",
              "value": "8.11.1"
            },
            {
              "name": "Apim:ServiceEndpoint",
              "value": "[parameters('APIMServiceEndpoint')]"
            },
            {
              "name": "Apim:SubscriptionKey",
              "value": "[parameters('APIMSubscriptionKey')]"
            },
            {
              "name": "Schedule",
              "value": "[parameters('MPR.Schedule')]"
            }
          ],
          "use32BitWorkerProcess": false
        }
      },
      "resources": [
        {
          "name": "connectionstrings",
          "type": "config",
          "apiVersion": "[variables('FunctionAppApiVersion')]",
          "dependsOn": [
            "[concat('Microsoft.Web/sites/', parameters('MPR.SynchronizationFunctionName'))]"
          ],
          "tags": {
            "displayName": "Functions-MPR.Synchronization-ConnectionStrings"
          },
          "properties": {
            "DatabaseConnectionString": {
              "value": "[concat('Data Source=tcp:', reference(concat('Microsoft.Sql/servers/', variables('sqlServerName'))).fullyQualifiedDomainName, ',1433;Initial Catalog=', parameters('databaseName'), ';User Id=', parameters('sqlServerAdminLogin'), ';Password=', parameters('sqlServerAdminLoginPassword'), ';')]",
              "type": "SQLAzure"
            }
          }
        }
      ]
    },
    {
      "type": "Microsoft.Web/serverfarms",
      "apiVersion": "[variables('HostingPlanApiVersion')]",
      "name": "[parameters('functionAppHostingPlanName')]",
      "location": "[resourceGroup().location]",
      "tags": {
        "displayName": "Functions-DynamicAppServicePlan"
      },
      "properties": {
        "name": "[parameters('functionAppHostingPlanName')]",
        "computeMode": "Dynamic",
        "sku": "Dynamic"
      }
    }
  ],
  "outputs": {
    "BlackboxDatabaseSqlServerHost": {
      "type": "string",
      "value": "[reference(concat('Microsoft.Sql/servers/', variables('sqlServerName'))).fullyQualifiedDomainName]"
    },
    "BlackboxDatabaseSqlDatabaseName": {
      "type": "string",
      "value": "[parameters('databaseName')]"
    },
    "OptimizationServiceBusConnectionString": {
      "type": "string",
      "value": "[concat('Endpoint=sb://', parameters('Blackbox.Servicebus.Name'),'.servicebus.windows.net/;SharedAccessKeyName=', variables('Blackbox.Servicebus.OptimizationResultsQueue.SendListen.Name'),';SharedAccessKey=', listkeys(variables('Blackbox.Servicebus.OptimizationResultsQueue.SendListen.ResourceId'), variables('serviceBusApiVersion')).primaryKey)]"
    },
    "BlackboxDatabaseSqlServerAdminLogin": {
      "type": "string",
      "value": "[parameters('sqlServerAdminLogin')]"
    },
    "BlackboxDatabaseSqlServerAdminLoginPassword": {
      "type": "string",
      "value": "[parameters('sqlServerAdminLoginPassword')]"
    }
  }
}