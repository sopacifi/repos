{
    "$schema": "http://schemas.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
      "appInsightsResourceGroupName": {
        "type": "string",
        "metadata": {
          "description": "The resource group containing the stamp-wide app insights for dbms"
        }
      },
      "keyVaultTenantId": {
        "type": "string",
        "defaultValue": "72f988bf-86f1-41af-91ab-2d7cd011db47",
        "metadata": {
          "description": "The tenant id to associate the key vault with"
        }
      },
      "keyVaultAccessPolicies": {
        "type": "array",
        "defaultValue": [
          {
            // Microsoft.Azure.WebSites
            "tenantId": "72f988bf-86f1-41af-91ab-2d7cd011db47",
            "objectId": "f8daea97-62e7-4026-becf-13c2ea98e8b4",
            "permissions": {
              "secrets": [
                "Get"
              ]
            }
          },
          {
            // D365 Cloud Scale Extended Team //idweb SG
            "tenantId": "72f988bf-86f1-41af-91ab-2d7cd011db47",
            "objectId": "a19a49f2-cc81-43f7-baeb-ff3fbf10f094",
            "permissions": {
              "certificates": [
                "List"
              ]
            }
          }
        ],
        "metadata": {
          "description": "The access policies for the key vault for dbms to deploy"
        }
      },
      "runtimeKeyVaultAccessPolicies": {
        "type": "array",
        "defaultValue": [
          {
            // d365-ops-dbms-*
            "tenantId": "72f988bf-86f1-41af-91ab-2d7cd011db47",
            "objectId": "[parameters('aadObjectId')]",
            "permissions": {
              "secrets": [
                "Get",
                "List",
                "Set",
                "Delete"
              ]
            }
          },
          {
            // D365 Cloud Scale Extended Team //idweb SG
            "tenantId": "72f988bf-86f1-41af-91ab-2d7cd011db47",
            "objectId": "a19a49f2-cc81-43f7-baeb-ff3fbf10f094",
            "permissions": {
              "secrets": [
                "List"
              ]
            }
          }
        ],
        "metadata": {
          "description": "The access policies for the key vault for dbms to use at runtime"
        }
      },
      "aadCertificateSecretName": {
        "type": "string",
        "defaultValue": "AAD"
      },
      "sslCertificateSecretName": {
        "type": "string",
        "defaultValue": "SSL"
      },
      "allowedAudiences": {
        "type": "array",
        "metadata": {
          "description": "Allowed Audiences"
        }
      },
      "authenticationClientId": {
        "type": "string",
        "metadata": {
          "description": "Active directory authentication client id"
        }
      },
      "authenticationIssuer": {
        "type": "string",
        "metadata": {
          "description": "Active directory authentication issuer"
        }
      },
      "aadCertificateCommonName": {
        "type": "string",
        "metadata": {
          "description": "Common name for the AAD certificate"
        }
      },
      "aadClientId": {
        "type": "string",
        "metadata": {
          "description": "Client id for the AAD app"
        }
      },
      "aadObjectId": {
        "type": "string",
        "metadata": {
          "description": "Object id for the AAD app"
        }
      },
      "customDomains": {
        "type": "array",
        "metadata": {
          "description": "Custom host names"
        }
      },
      "spartanEnvironment": {
        "type": "string",
        "defaultValue": "prod",
        "metadata": {
          "description": "Spartan environment for the SpartanClient. E.g. 'tie' or 'prod'"
        }
      },
      "spartanServicePrincipal": {
        "type": "string",
        "metadata": {
          "description": "Spartan service principal for the SpartanClient. E.g. 'AXConnectTest' or 'D365OpsDev'"
        }
      },
      "spartanKeyVaultUri": {
        "type": "string",
        "metadata": {
          "description": "KeyVault URI for the SpartanClient."
        }
      },
      "createAppWhitelist": {
        "type": "string",
        "metadata": {
          "description": "Semicolon-delimited list of AAD App IDs with permission to create."
        }
      },
      "deleteAppWhitelist": {
        "type": "string",
        "metadata": {
          "description": "Semicolon-delimited list of AAD App IDs with permission to delete."
        }
      },
      "dbSubscription": {
        "type": "string",
        "metadata": {
          "description": "Subscription for database resources."
        }
      },
      "managementAppWhitelist": {
        "type": "string",
        "metadata": {
          "description": "Semicolon-delmitied list of AAD App IDs with permission to manage."
        }
      },
      "instanceCount": {
        "type": "int",
        "defaultValue": 3,
        "metadata": {
          "description": "Configure the capacity of the App Service."
        }
      },
      "dbTypeMap": {
        "type": "object",
        "defaultValue": {
          "AX": {
            "TierGroup": "AX",
            "TierName": "AX50"
          },
          "EDW": {
            "TierGroup": "EDW",
            "TierName": "EDW50"
          },
          "MR": {
            "TierGroup": "EDW",
            "TierName": "MR50"
          }
        },
        "metadata": {
          "description": "The DBType configuration."
        }
      },
      "packageLink": {
        "type": "string"
      }
    },
    "variables": {
      "appInsightsResourceId": "[resourceId(parameters('appInsightsResourceGroupName'), 'microsoft.insights/components/', parameters('appInsightsResourceGroupName'))]",
      "runtimeKeyVaultName": "[concat(resourceGroup().name, '-run')]",
      "storageAccountName": "[replace(resourceGroup().name, '-', '')]",
      "storageAccountId": "[concat(resourceGroup().id,'/providers/','Microsoft.Storage/storageAccounts/', variables('storageAccountName'))]"
    },
    "resources": [
      {
        "type": "Microsoft.Storage/storageAccounts",
        "name": "[variables('storageAccountName')]",
        "apiVersion": "2015-06-15",
        "location": "[resourceGroup().location]",
        "properties": {
          "accountType": "Standard_LRS"
        }
      },
      {
        "type": "Microsoft.Web/serverfarms",
        "apiVersion": "2016-09-01",
        "name": "[resourceGroup().name]",
        "location": "[resourceGroup().location]",
        "properties": {
          "name": "[resourceGroup().name]"
        },
        "sku": {
          "name": "S1",
          "tier": "Standard",
          "size": "S1",
          "family": "S",
          "capacity": "[parameters('instanceCount')]"
        }
      },
      {
        "type": "Microsoft.KeyVault/vaults",
        "name": "[resourceGroup().name]",
        "apiVersion": "2018-02-14",
        "location": "[resourceGroup().location]",
        "properties": {
          "sku": {
            "family": "A",
            "name": "standard"
          },
          "tenantId": "[parameters('keyVaultTenantId')]",
          "accessPolicies": "[parameters('keyVaultAccessPolicies')]",
          "enableSoftDelete": true
        }
      },
      {
        "type": "Microsoft.KeyVault/vaults",
        "name": "[variables('runtimeKeyVaultName')]",
        "apiVersion": "2018-02-14",
        "location": "[resourceGroup().location]",
        "properties": {
          "sku": {
            "family": "A",
            "name": "standard"
          },
          "tenantId": "[parameters('keyVaultTenantId')]",
          "accessPolicies": "[parameters('runtimeKeyVaultAccessPolicies')]",
          "enableSoftDelete": true
        }
      },
      // This will, by design, fail the first time here. Certificates need to be manually created in EACH vault (for redundancy).
      {
        "type": "Microsoft.Web/certificates",
        "name": "[parameters('aadCertificateSecretName')]",
        "apiVersion": "2016-03-01",
        "location": "[resourceGroup().location]",
        "properties": {
          "keyVaultId": "[resourceId('Microsoft.KeyVault/vaults', resourceGroup().name)]",
          "keyVaultSecretName": "[parameters('aadCertificateSecretName')]",
          "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', resourceGroup().name)]"
        },
        "dependsOn": [
          "[resourceId('Microsoft.KeyVault/vaults', resourceGroup().name)]",
          "[resourceId('Microsoft.Web/serverfarms', resourceGroup().name)]"
        ]
      },
      {
        "type": "Microsoft.Web/certificates",
        "name": "[parameters('sslCertificateSecretName')]",
        "apiVersion": "2016-03-01",
        "location": "[resourceGroup().location]",
        "properties": {
          "keyVaultId": "[resourceId('Microsoft.KeyVault/vaults', resourceGroup().name)]",
          "keyVaultSecretName": "[parameters('sslCertificateSecretName')]",
          "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', resourceGroup().name)]"
        },
        "dependsOn": [
          "[resourceId('Microsoft.KeyVault/vaults', resourceGroup().name)]",
          "[resourceId('Microsoft.Web/serverfarms', resourceGroup().name)]"
        ]
      },
      {
        "apiVersion": "2016-03-01",
        "type": "Microsoft.Web/sites",
        "name": "[resourceGroup().name]",
        "location": "[resourceGroup().location]",
        "kind": "functionapp",
        "dependsOn": [
          "[resourceId('Microsoft.Web/serverfarms', resourceGroup().name)]",
          "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]",
          "[resourceId('Microsoft.Web/certificates', parameters('sslCertificateSecretName'))]",
          "[resourceId('Microsoft.Web/certificates', parameters('aadCertificateSecretName'))]",
          "[resourceId('Microsoft.KeyVault/vaults', variables('runtimeKeyVaultName'))]"
        ],
        "properties": {
          "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', resourceGroup().name)]",
          "siteConfig": {
            "appSettings": [
              {
                "name": "AadClientId",
                "value": "[parameters('aadClientId')]"
              },
              {
                "name": "AadCertCommonName",
                "value": "[parameters('aadCertificateCommonName')]"
              },
              {
                "name": "SpartanEnvironment",
                "value": "[parameters('spartanEnvironment')]"
              },
              {
                "name": "SpartanServicePrincipal",
                "value": "[parameters('spartanServicePrincipal')]"
              },
              {
                "name": "SpartanKeyVaultUri",
                "value": "[parameters('spartanKeyVaultUri')]"
              },
              {
                "name": "APPINSIGHTS_INSTRUMENTATIONKEY",
                "value": "[reference(variables('appInsightsResourceId'), '2014-04-01').InstrumentationKey]"
              },
              {
                "name": "AzureWebJobsDashboard",
                "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('storageAccountName'), ';AccountKey=', listKeys(variables('storageAccountId'),'2015-05-01-preview').key1)]"
              },
              {
                "name": "AzureWebJobsStorage",
                "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('storageAccountName'), ';AccountKey=', listKeys(variables('storageAccountId'),'2015-05-01-preview').key1)]"
              },
              {
                "name": "CreateAppWhitelist",
                "value": "[parameters('createAppWhitelist')]"
              },
              {
                "name": "DeleteAppWhitelist",
                "value": "[parameters('deleteAppWhitelist')]"
              },
              {
                "name": "ManagementAppWhitelist",
                "value": "[parameters('managementAppWhitelist')]"
              },
              {
                "name": "DBTypeMap",
                "value": "[string(parameters('dbTypeMap'))]"
              },
              {
                "name": "DBSubscription",
                "value": "[parameters('dbSubscription')]"
              },
              {
                "name": "RuntimeKeyVaultUri",
                "value": "[reference(concat('Microsoft.KeyVault/vaults/', variables('runtimeKeyVaultName')), '2018-02-14').VaultUri]"
              },
              {
                "name": "FUNCTION_APP_EDIT_MODE",
                "value": "readwrite"
              },
              {
                "name": "FUNCTIONS_EXTENSION_VERSION",
                "value": "~1"
              },
              {
                "name": "WEBSITE_CONTENTAZUREFILECONNECTIONSTRING",
                "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('storageAccountName'), ';AccountKey=', listKeys(variables('storageAccountId'),'2015-05-01-preview').key1, ';EndpointSuffix=core.windows.net')]"
              },
              {
                "name": "WEBSITE_CONTENTSHARE",
                "value": "[toLower(resourceGroup().name)]"
              },
              {
                "name": "WEBSITE_LOAD_CERTIFICATES",
                "value": "*"
              },
              {
                "name": "WEBSITE_NODE_DEFAULT_VERSION",
                "value": "6.5.0"
              }
            ],
            "minTlsVersion": "1.2",
            "alwaysOn": true
          },
          "httpsOnly": true
        },
        "resources": [
          {
            "name": "MSDeploy",
            "type": "Extensions",
            "apiVersion": "2015-02-01",
            "dependsOn": [
              "[concat('Microsoft.Web/sites/', resourceGroup().name)]"
            ],
            "properties": {
              "packageUri": "[parameters('packageLink')]"
            }
          },
          {
            "apiVersion": "2015-08-01",
            "name": "authsettings",
            "type": "config",
            "dependsOn": [
              "[resourceId('Microsoft.Web/sites', resourceGroup().name)]",
              "[resourceId('Microsoft.Web/Sites/Extensions', resourceGroup().name, 'MSDeploy')]"
            ],
            "properties": {
              "enabled": true,
              "unauthenticatedClientAction": "RedirectToLoginPage",
              "tokenStoreEnabled": true,
              "defaultProvider": "AzureActiveDirectory",
              "clientId": "[parameters('authenticationClientId')]",
              "issuer": "[parameters('authenticationIssuer')]",
              "allowedAudiences": "[parameters('allowedAudiences')]"
            }
          }
        ]
      },
      {
        "type": "Microsoft.Web/sites/hostnameBindings",
        "name": "[concat(resourceGroup().name, '/', parameters('customDomains')[copyIndex()])]",
        "apiVersion": "2016-08-01",
        "location": "[resourceGroup().location]",
        "properties": {
          "customHostNameDnsRecordType": "CName",
          "hostNameType": "Verified",
          "sslState": "SniEnabled",
          "thumbprint": "[reference(resourceId('Microsoft.Web/certificates', parameters('sslCertificateSecretName'))).Thumbprint]"
        },
        "dependsOn": [
          "[resourceId('Microsoft.Web/sites', resourceGroup().name)]",
          "[resourceId('Microsoft.Web/sites/config', resourceGroup().name, 'authsettings')]",
          "[resourceId('Microsoft.Web/Sites/Extensions', resourceGroup().name, 'MSDeploy')]"
        ],
        "copy": {
          "name": "bindingsCopy",
          "count": "[length(parameters('customDomains'))]",
          "mode": "serial",
          "batchSize": 1
        }
      }
    ]
  }
